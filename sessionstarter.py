'''
Author: Matt Brooks, @cmatthewbrooks

DESCRIPTION:

The sessionstarter.py script is helpful when starting a new
r2 session against a suspected malware target. It will handle
auto-analysis as well as naming specific types of functions.

ARGS:

Use the optional -i flag to point to a directory of sig hash files
generated by sigs.py

NOTES:

- When using zsigs from a signature file, only the "bytes" sigs
  are considered. The "refs" and "graphs" sigs are too loose for
  my taste and in the instances where they match correctly, a
  "bytes" signature exists for the same function. If you determine
  a case where the "refs" or "graphs" signatures were useful without
  an existing "bytes" signature, please file a Github issue.

TODO:


'''

import os,sys
import argparse
import json

import r2pipe 
import r2utils as R2utils

class SessionStarter:

    def __init__(self, input_obj = None):

        # If the input is an r2pipe.open object, then state is
        # being passed and must be returned.

        # If the input is a file, then state should still be returned.

        # If there is no input, state is being handled in-session.

        return_pipe = None

        if not input_obj:
            return_pipe = False
        elif input_obj.__class__ == 'r2pipe.open':
            return_pipe = True
        elif os.path.isfile(input_obj):
            return_pipe = True
        else:
            print '\nNot a valid input type for SessionStarter\n'
            sys.exit(1)


        r2utils = R2utils.r2utils()
        r2 = r2utils.get_analyzed_r2pipe_from_input(input_obj)
        funcj_list = r2utils.get_funcj_list(r2)

        self.rename_common_funcs(r2, funcj_list)

        if return_pipe:
            return r2
        else:
            return None

        r2.quit()

    def rename_common_funcs(self, r2, funcj_list):

        r2utils = R2utils.r2utils()

        for funcj in funcj_list:

            if r2utils.check_is_import_jmp_func(funcj):

                r2.cmd('s ' + str(funcj['addr']))
                r2.cmd('afn jmp_' + 
                    r2utils.get_import_from_import_jmp_func(funcj)
                )

            elif r2utils.check_is_wrapper_func(funcj):

                r2.cmd('s ' + str(funcj['addr']))
                r2.cmd('afn wrapper_' + 
                    (r2utils.get_call_from_wrapper(funcj)).replace(' ','_')
                )

            elif r2utils.check_is_global_assignment_func(funcj):

                r2.cmd('s ' + str(funcj['addr']))
                r2.cmd('afn globalassign_' + funcj['name'].replace('.',''))

if __name__ == '__main__':

    ss = SessionStarter()
