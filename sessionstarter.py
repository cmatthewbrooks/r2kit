'''
Author: Matt Brooks, @cmatthewbrooks

DESCRIPTION:

The sessionstarter.py script is helpful when starting a new
r2 session against a suspected malware target. It will handle
auto-analysis as well as naming specific types of functions.

ARGS:

Use the optional -i flag to point to a directory of sig hash files
generated by sigs.py

NOTES:

- 

TODO:


'''

import os,sys
import argparse
import json

import r2pipe 
import r2utils as R2utils

from sigs import Handler

class SessionStarter:

    def __init__(self, input_obj = None):
        
        self.r2utils = R2utils.r2utils()
        self.r2 = self.r2utils.get_analyzed_r2pipe_from_input(input_obj)

    def rename_library_code(self, infile):

        # imported from sigs.py
        h = Handler()
        h.initialize_handlers()
        h.rename_from_infile(infile)

    def rename_common_funcs(self):

        funcj_list = self.r2utils.get_funcj_list(self.r2)

        for funcj in funcj_list:

            if (self.r2utils.check_is_import_jmp_func(funcj) 
                and funcj['name'].startswith('fcn.')):

                self.r2.cmd('s ' + str(funcj['addr']))
                self.r2.cmd('afn jmp_' + 
                    self.r2utils.get_import_from_import_jmp_func(funcj)
                )

            elif (self.r2utils.check_is_wrapper_func(funcj) 
                and funcj['name'].startswith('fcn.')):

                self.r2.cmd('s ' + str(funcj['addr']))
                self.r2.cmd('afn wrapper_' + 
                    self.r2utils.get_call_from_wrapper(funcj).replace(' ','_')
                )

            elif (self.r2utils.check_is_global_assignment_func(funcj) 
                and funcj['name'].startswith('fcn.')):

                self.r2.cmd('s ' + str(funcj['addr']))
                self.r2.cmd(
                    'afn globalassign_' + funcj['name'].replace('.','')
                )

if __name__ == '__main__':

    parser = argparse.ArgumentParser()
    parser.add_argument('-i','--infile', 
        help = 'Input for matching. Can be a file or directory.')
    args = parser.parse_args()

    if args.infile and not os.path.exists(args.infile):

        print args.infile + ' is not a valid input for signature matching.'
        sys.exit(1)
    
    elif args.infile and os.path.exists(args.infile):
    
        ss = SessionStarter()
        ss.rename_library_code(args.infile)
        ss.rename_common_funcs()
    
    elif not args.infile:
    
        ss = SessionStarter()
        ss.rename_common_funcs()
